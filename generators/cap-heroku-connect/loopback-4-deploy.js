const Generator = require('yeoman-generator');
const astUtilities = require('../app/utils/AST-files');
const { exec } = require('promisify-child-process');
let path = '';
let appName = '';

module.exports = class extends Generator {
  constructor(args, opts) {
    super(args, opts);
    path = opts.path;
    appName = opts.appName;
  }

  async prompting() { }

  async writing() {
    try {
      await astUtilities.astFunctions.replaceText(
        this.destinationPath(`${path}/src/.gitignore`),
        `
        # Logs
        logs
        *.log
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
        
        # Runtime data
        pids
        *.pid
        *.seed
        *.pid.lock
        
        # Directory for instrumented libs generated by jscoverage/JSCover
        lib-cov
        
        # Coverage directory used by tools like istanbul
        coverage
        
        # nyc test coverage
        .nyc_output
        
        # Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
        .grunt
        
        # Bower dependency directory (https://bower.io/)
        bower_components
        
        # node-waf configuration
        .lock-wscript
        
        # Compiled binary addons (http://nodejs.org/api/addons.html)
        build/Release
        
        # Dependency directories
        node_modules/
        jspm_packages/
        
        # Typescript v1 declaration files
        typings/
        
        # Optional npm cache directory
        .npm
        
        # Optional eslint cache
        .eslintcache
        
        # Optional REPL history
        .node_repl_history
        
        # Output of 'npm pack'
        *.tgz
        
        # Yarn Integrity file
        .yarn-integrity
        
        # dotenv environment variables file
        .env
        
        # Transpiled JavaScript files from Typescript
        
        # Cache used by TypeScript's incremental build
        *.tsbuildinfo
        
        `
      );

      // File.set('scripts.start', `node .`);
      await astUtilities.astFunctions.editJSONFile(path, 'scripts.start', 'node .');
    } catch (error) {
      console.log('error: ', error);
    }
  }

  async end() {
    try {
      await exec('git init', {
        cwd: this.destinationPath(path)
      });

      await exec('git add .', {
        cwd: this.destinationPath(path)
      });

      await exec('git commit -m "My first commit"', {
        cwd: this.destinationPath(path)
      });

      await exec(`heroku git:remote -a ${appName}`, {
        cwd: this.destinationPath(path)
      });

      await exec('git push heroku master', {
        cwd: this.destinationPath(path)
      });
    } catch (error) {
      console.log('error: ', error);
    }
  }
};
